#!/usr/bin/env bash
# By    : Sandeep Tech ~SANDEEP
# Date  : 01/01/2025.

# Capture external arguments
PWD=$(pwd)
ar1="$1"
ar2="$2"
ar3="$3"

# Colors
S0="\033[1;30m" B0="\033[1;40m"
S1="\033[1;31m" B1="\033[1;41m"
S2="\033[1;32m" B2="\033[1;42m"
S3="\033[1;33m" B3="\033[1;43m"
S4="\033[1;34m" B4="\033[1;44m"
S5="\033[1;35m" B5="\033[1;45m"
S6="\033[1;36m" B6="\033[1;46m"
S7="\033[1;37m" B7="\033[1;47m"
R0="\033[00m" R1="\033[1;00m"
D0="\033[77m"

# Ensure cloudflared is installed
version=$(cloudflared --version 2>/dev/null)
if [[ $version != *'version'* ]]; then
  printf "${S2}Cloudflared not found. Installing...${R0}\n"
  pkg update -y && pkg install cloudflared -y
fi

# Banner Function
banner() {
  printf "${S7}  ╔═══╦╗──╔═══╦╗─╔╦═══╦═══╦╗──╔═══╦═══╦═══╗${R0}\n"
  printf "${S6}  ║╔═╗║║──║╔═╗║║─║╠╗╔╗║╔══╣║──║╔═╗║╔═╗║╔══╝${R0}\n"
  printf "${S2}  ║║─╚╣║──║║─║║║─║║║║║║╚══╣║──║║─║║╚═╝║╚══╗${R0}\n"
  printf "${S3}  ║║─╔╣║─╔╣║─║║║─║║║║║║╔══╣║─╔╣╚═╝║╔╗╔╣╔══╝${R0}\n"
  printf "${S3}  ║╚═╝║╚═╝║╚═╝║╚═╝╠╝╚╝║║──║╚═╝║╔═╗║║║╚╣╚══╗${R0}\n"
  printf "${S1}  ╚═══╩═══╩═══╩═══╩═══╩╝──╚═══╩╝─╚╩╝╚═╩═══╝${R0}\n\n"
  printf "${S4}  Author: ${S7}Sandeep Tech ~SANDEEP${R0}\n"
  printf "${S5}[___________________cloudflare___________________]${R0}\n\n"
}

# Animate Function
Animate() {
  printf "${S2}Generating Link${S5}      ${R0}\r"; sleep 0.1
  printf "${S2}Generating Link${S5}.     ${R0}\r"; sleep 0.1
  printf "${S2}Generating Link${S5}..    ${R0}\r"; sleep 0.1
  printf "${S2}Generating Link${S5}...   ${R0}\r"; sleep 0.1
}

# HTTP Function
HTTP() {
  rm -rf ${PWD}/cloudflare-log >/dev/null 2>&1
  if [[ ${PWD} == *'com.termux'* ]]; then
    termux-chroot cloudflared -url 127.0.0.1:${ar2} --logfile ${PWD}/cloudflare-log >/dev/null 2>&1 &
  else
    cloudflared -url 127.0.0.1:${ar2} --logfile ${PWD}/cloudflare-log >/dev/null 2>&1 &
  fi
  sleep 5
  while true; do
    forward=$(grep -o 'https://[-0-9a-z]*\.trycloudflare.com' "${PWD}/cloudflare-log")
    printf "\033[?25l"
    Animate
    if [[ -n $forward ]]; then
      printf "\033[?12l\033[?25h"
      if [[ $ar3 == '-s' || $ar3 == '--silent' ]]; then
        printf "%s\n" ${forward}
      else
        printf "${S4}FORWARDING:${R0}${D0} %s${R0}\n" ${forward}
      fi
      break
    fi
  done
}

# Help Menu
help() {
  echo -e "
  OPTIONS:
    -s --silent           To ignore banner.
  USAGE:
    cloudflare http <port> [OPTION]
  UPDATE:
    cloudflare -u
  "
}

# Main Function
main() {
  if [[ -z "$ar1" ]]; then
    printf "${S2}[${S1}!${S2}]${S4}Arguments missing! Use '--help' for the help menu\n"
    exit 1
  fi

  case ${ar1,,} in
    http)
      if [[ $ar3 == '-s' || $ar3 == '--silent' ]]; then
        pids=$(pgrep cloudflared)
        kill -9 $pids >/dev/null 2>&1
        HTTP -s
      else
        banner
        pids=$(pgrep cloudflared)
        kill -9 $pids >/dev/null 2>&1
        HTTP
      fi
      ;;
    -u|--update)
      printf "${S4}Updating cloudflare script...${R0}\n"
      # Add update logic here (e.g., pull latest changes)
      ;;
    --help|-h)
      help
      ;;
    *)
      printf "${S2}[${S1}!${S2}]${S4}Invalid Arguments! Use '--help' for the help menu\n"
      exit 1
      ;;
  esac
}

# Run Main
main
